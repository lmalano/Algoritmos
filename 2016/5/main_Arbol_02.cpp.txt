#include <stdio.h>
#include <iostream>
#include <conio.h>

using namespace std;

typedef int tarbol;
struct nodo{
      tarbol info;
      nodo *der,*izq;
};
typedef nodo * pnodo;
class arbol{
    pnodo raiz, q;
    void ArbolBusq(tarbol x, pnodo &nuevo);
    void rid(pnodo aux);
    void ird(pnodo aux);
    void idr(pnodo aux);
    void show(pnodo aux, int n);
    void borrar(pnodo &p, tarbol x);
    void bor(pnodo &d);
    void mh(pnodo aux);
    tarbol menor(pnodo aux);
    bool esta(pnodo aux, tarbol x);
public:
    arbol(){raiz=NULL;};
    ~arbol(){};
    void CreaArbolBus(tarbol x);
    void RID(){ rid(raiz); }
    void IRD(){ ird(raiz); }
    void IDR(){ idr(raiz); }
    void VerArbol(){ show(raiz,0); }
    void Borrar(tarbol x){ borrar(raiz,x);}
    void MostrarHojas(){mh(raiz);}
    tarbol Menor(){return menor(raiz);}
    bool Esta(tarbol x){return esta(raiz,x);}
};


bool arbol::esta(pnodo aux, tarbol x)
{ if(aux==NULL) return false;
  else if(x>aux->info) return esta(aux->der,x);
  else if(x<aux->info) return esta(aux->izq,x);
  return true;

}

void arbol::mh(pnodo aux)
{  if(aux!=NULL){
        mh(aux->izq);
        if(aux->izq==NULL && aux->der==NULL)cout<<"\n"<<aux->info;
        mh(aux->der);
   }   
}

tarbol arbol::menor(pnodo aux)
{  if(aux->izq==NULL)return aux->info;
   return menor(aux->izq);
}

void arbol::borrar(pnodo &p, tarbol x)//con raiz y con el dato
{ if(p==NULL) cout<<"\n El dato NO esta\n\n";
  else if(x>p->info) borrar(p->der,x);//si el dato q busco es mas grande lo busco x la der
  else if(x<p->info) borrar(p->izq,x);
  else {// lo encontre en el nodo p
        q=p;
        if (q->der==NULL) p=q->izq;// raiz<=raiz del subarbol izq
        else if (q->izq==NULL) p=q->der;//raiz<=raiz del subarbol der
        else bor(q->izq);//busca en el sub arbol izq el elem mas a la derecha
        delete q;
  }
}
void arbol::bor(pnodo &d)
{ if(d->der!=NULL) bor(d->der);//busca el elemento mas a la derecha
  else{ q->info = d->info;
        q=d;
        d=d->izq;
  }
}
void arbol::CreaArbolBus(tarbol x)
{ ArbolBusq(x,raiz);
}
void arbol::ArbolBusq(tarbol x, pnodo &nuevo)
{
  if(nuevo==NULL){
      nuevo= new nodo;
      nuevo->info=x; nuevo->der=nuevo->izq=NULL;
  }
  if(x > nuevo->info) ArbolBusq(x, nuevo->der);
  if(x < nuevo->info) ArbolBusq(x, nuevo->izq);
}
void arbol::ird(pnodo aux)
{  if(aux!=NULL){
        ird(aux->izq);
        cout<<"\n"<<aux->info;
        ird(aux->der);
   }
}
void arbol::rid(pnodo aux)
{  if(aux!=NULL){
        cout<<"\n"<<aux->info;
        rid(aux->izq);
        rid(aux->der);
   }
}
void arbol::idr(pnodo aux)
{  if(aux!=NULL){
        idr(aux->izq);
        idr(aux->der);
        cout<<"\n"<<aux->info;
   }
}
void arbol::show(pnodo aux, int n)
{ int i;
   if(aux!=NULL){                      //OjO este es un recorrido dri
       show(aux->der, n+1);
       for(i=1; i<=n; i++) cout<<"     ";
       cout<<aux->info<<"\n";
       show(aux->izq, n+1);
   }
}
//-------------------------------------------------------
int main (int argc, char *argv[])
{  int i; tarbol x;
   arbol T;
   int vec[10]={50,12,18,240,222,45,410,325,38,95};
   for(i=0;i<10;i++){ 
                      T.CreaArbolBus(vec[i]);
                      //T.VerArbol();
                      //system("PAUSE");
   } 
                     
   T.VerArbol();
   /*
   T.IRD();
   cout<<"\n--------------------------------";
   T.RID();
   cout<<"\n--------------------------------";
   T.IDR();  
   */
   cout<<"\n Mostrar Hojas ----------";
   T.MostrarHojas();
   
   cout<<"\n El menor del arbol= "<<T.Menor();
 
   if(T.Esta(95))cout<<"\n\n El dato 95 esta";
   else cout<<"\n\n El dato 95 NO esta";
   

   for(i=0;i<11;i++){
     cout<<"\n -------------------------------- Ing dato a borrar= "; cin>>x;
     T.Borrar(x);
     T.VerArbol();
   }
  
   cout<<endl<<endl;
   system("PAUSE");
   return 0;
}


